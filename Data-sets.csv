import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import StandardScaler

# Step 1: Generate Sample CSV Files
movies_data = {
    'movieId': [1, 2, 3, 4, 5, 6],
    'title': [
        'Toy Story (1995)', 'Jumanji (1995)', 'Grumpier Old Men (1995)',
        'Waiting to Exhale (1995)', 'Father of the Bride Part II (1995)', 'Heat (1995)'
    ],
    'genres': [
        'Adventure|Animation|Children|Comedy|Fantasy',
        'Adventure|Children|Fantasy',
        'Comedy|Romance',
        'Comedy|Drama|Romance',
        'Comedy',
        'Action|Crime|Thriller'
    ]
}

ratings_data = {
    'userId': [1, 1, 2, 2, 3, 3],
    'movieId': [1, 2, 1, 3, 2, 4],
    'rating': [4.0, 3.5, 5.0, 3.0, 4.5, 2.0]
}

# Create DataFrames
movies_df = pd.DataFrame(movies_data)
ratings_df = pd.DataFrame(ratings_data)

# Save to CSV
movies_df.to_csv("movies.csv", index=False)
ratings_df.to_csv("ratings.csv", index=False)

# Step 2: Load the Data
movies = pd.read_csv("movies.csv")
ratings = pd.read_csv("ratings.csv")

# Step 3: Create User-Movie Matrix
user_movie_matrix = ratings.pivot_table(index='userId', columns='movieId', values='rating').fillna(0)

# Step 4: Normalize the Ratings
scaler = StandardScaler()
user_movie_matrix_scaled = scaler.fit_transform(user_movie_matrix)

# Step 5: Compute Similarity Matrix
user_similarity = cosine_similarity(user_movie_matrix_scaled)
similarity_df = pd.DataFrame(user_similarity, index=user_movie_matrix.index, columns=user_movie_matrix.index)

# Step 6: Recommendation Function
def recommend_movies(user_id, num_recommendations=5):
    similar_users = similarity_df[user_id].sort_values(ascending=False)[1:]
    similar_user_ids = similar_users.index

    user_seen_movies = set(ratings[ratings['userId'] == user_id]['movieId'])

    movie_scores = {}
    for other_user in similar_user_ids:
        other_user_ratings = ratings[ratings['userId'] == other_user]
        for _, row in other_user_ratings.iterrows():
            if row['movieId'] not in user_seen_movies:
                movie_scores.setdefault(row['movieId'], []).append(row['rating'])

    scored_movies = {
        movie_id: sum(scores) / len(scores)
        for movie_id, scores in movie_scores.items()
    }

    top_movies = sorted(scored_movies.items(), key=lambda x: x[1], reverse=True)[:num_recommendations]
    recommended_titles = movies[movies['movieId'].isin([movie[0] for movie in top_movies])]

    return recommended_titles[['title', 'genres']]

# Step 7: Run a Test Recommendation
print("Recommendations for User 1:")
print(recommend_movies(user_id=1, num_recommendations=3))
